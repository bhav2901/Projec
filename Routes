

2)src/App.js

import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";

import Sidebar from "./components/Sidebars/Sidebar";
import TopBlue from "./components/TopBlue";
import FilesPanel from "./components/Filespanel/FilesPanel";
import Downloads from "./components/Downloads";
import Favorites from "./components/Favorites";
import Navbar from "./components/Navbar";

export default function App() {
  return (
    <div className="bg-light">
      {/* Page title */}
      <header className="py-2 text-center user-title">
        <h1 className="mb-0">User Dashboard</h1>
      </header>

      <div className="container-fluid px-4">
        <div className="row gx-3">
          {/* LEFT: Sidebar */}
          <Sidebar />

          {/* RIGHT: Main content */}
          <main className="col-md-9 col-lg-10">
            <Navbar />
            <TopBlue />

            <div className="container mt-3">
              <Routes>
                <Route path="/" element={<FilesPanel />} />
                <Route path="/downloads" element={<Downloads />} />
                <Route path="/favorites" element={<Favorites />} />

                {/* Catch-all: redirect unknown routes to dashboard */}
                <Route path="*" element={<Navigate to="/" replace />} />
              </Routes>
            </div>
          </main>
        </div>
      </div>
    </div>
  );
}


export default App;









3) src/index.js

import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import "bootstrap/dist/css/bootstrap.min.css";
import "./index.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);






5) -- Navbar.js

import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import '../components/navbar.css';

// ModalPopup component
const ModalPopup = ({ showModalPopup, onPopupClose, downloadLink, popupContent }) => {
  return (
    <>
      {showModalPopup && (
        <div className="modal-overlay" onClick={() => onPopupClose(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            {popupContent ? (
              popupContent
            ) : (
              <>
                <h2>Download Options</h2>
                <p>Choose your download option:</p>
                <a href={downloadLink} download="your-file.pdf">
                  <button style={{ borderWidth: 1, padding: 5, margin: 10 }}>Download File</button>
                </a>
                <button
                  onClick={() => onPopupClose(false)}
                  style={{ borderWidth: 2, width: 450, display: 'grid' }}
                >
                  Close
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </>
  );
};

const Navbar = () => {
  const [showDownloadPopup, setShowDownloadPopup] = useState(false);
  const [showFavoritesPopup, setShowFavoritesPopup] = useState(false);

  const toggleDownloadPopup = () => {
    setShowDownloadPopup(!showDownloadPopup);
  };

  const toggleFavoritesPopup = () => {
    setShowFavoritesPopup(!showFavoritesPopup);
  };

  return (
    <>
      <ul className="nav-links">
        <li>
          <NavLink to="/downloads" className={({ isActive }) => (isActive ? 'active' : '')}>
            <button onClick={toggleDownloadPopup} style={{ borderWidth: 1, borderColor: 'black' }}>
              Downloads
            </button>
          </NavLink>
        </li>
        <li>
          <NavLink to="/favorites" className={({ isActive }) => (isActive ? 'active' : '')}>
            <button onClick={toggleFavoritesPopup} style={{ borderWidth: 1, borderColor: 'black' }}>
              Favorites
            </button>
          </NavLink>
        </li>
      </ul>

      {/* Download Popup */}
      <ModalPopup
        showModalPopup={showDownloadPopup}
        onPopupClose={toggleDownloadPopup}
        downloadLink="/path/to/your-file.pdf"
      />

      {/* Favorites Popup */}
      <ModalPopup
        showModalPopup={showFavoritesPopup}
        onPopupClose={toggleFavoritesPopup}
        popupContent={
          <>
            <h2>Your Favorites</h2>
            <p>This is your list of favorite items!</p>
            <button onClick={toggleFavoritesPopup}>Close</button>
          </>
        }
      />
    </>
  );
};

export default Navbar;




New 



1) --- sidebar.css


.sidebar {
  background-color: #2f3b52; /* dark bg */
  min-height: 100vh;        /* take full screen height */
  padding: 1rem;
}

.btn-toggle {
  background: transparent;
  color: white !important;
  border: none;
}

.btn-toggle:hover {
  opacity: 0.85;
}


2) --- sidebar.js 



import React, { useState } from "react";
import "../Sidebars/sidebar.css";

/**
 * Matches your folder tree:
 * - SCB
 * - General (collapsible)
 *   - Reports (collapsible)
 * - Credit
 *   - General (collapsible)
 */
export default function Sidebar() {
  const [openGeneral, setOpenGeneral] = useState(true);
  const [openReports, setOpenReports] = useState(false);
  const [openCreditGeneral, setOpenCreditGeneral] = useState(false);

  return (
    <aside className="col-md-3 col-lg-2 pe-0">
      <div
        className="sidebar border rounded-start shadow-sm"
        style={{
          backgroundColor: "#2f3b52", // dark background so white text shows
          minHeight: "100vh", // full height sidebar
          paddingTop: "1rem",
        }}
      >
        {/* SCB root */}
        <div className="folder-item mb-2">
          <div className="d-flex align-items-center">
            <i className="bi bi-folder2-fill folder-icon" style={{ color: "white" }}></i>
            <span className="fw-medium" style={{ color: "white" }}>SCB</span>
          </div>
        </div>

        {/* General group */}
        <div className="folder-group mt-3">
          <button
            className="btn btn-toggle w-100 text-start d-flex align-items-center"
            onClick={() => setOpenGeneral(v => !v)}
          >
            <i className="bi bi-folder me-2" style={{ color: "white" }}></i>
            <span style={{ color: "white" }}>General</span>
            <i
              className={`bi ms-auto rotate-icon ${
                openGeneral ? "bi-caret-down-fill rotated" : "bi-caret-right-fill"
              }`}
              style={{ color: "white" }}
            ></i>
          </button>

          {openGeneral && (
            <div className="ps-3 pt-2">
              <button
                className="btn btn-toggle w-100 text-start d-flex align-items-center"
                onClick={() => setOpenReports(v => !v)}
              >
                <i className="bi bi-folder me-2" style={{ color: "white" }}></i>
                <span style={{ color: "white" }}>Reports</span>
                <i
                  className={`bi ms-auto rotate-icon-small ${
                    openReports ? "bi-caret-down-fill rotated" : "bi-caret-right-fill"
                  }`}
                  style={{ color: "white" }}
                ></i>
              </button>
              {openReports && (
                <div className="ps-3 pt-2" style={{ color: "white" }}>
                  <div className="small text-white">(no items)</div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Credit group */}
        <div className="mt-3">
          <div className="d-flex align-items-center">
            <i className="bi bi-folder2-fill folder-icon" style={{ color: "white" }}></i>
            <span className="fw-medium" style={{ color: "white" }}>Credit</span>
          </div>

          <div className="mt-2 ps-3">
            <button
              className="btn btn-toggle w-100 text-start d-flex align-items-center"
              style={{ paddingLeft: 0 }}
              onClick={() => setOpenCreditGeneral(v => !v)}
            >
              <i className="bi bi-folder me-2" style={{ color: "white" }}></i>
              <span style={{ color: "white" }}>Credit Risk</span>
              <i
                className={`bi ms-auto rotate-icon-small ${
                  openCreditGeneral ? "bi-caret-down-fill rotated" : "bi-caret-right-fill"
                }`}
                style={{ color: "white" }}
              ></i>
            </button>
            {openCreditGeneral && (
              <div className="ps-3 pt-2">
                <div className="small text-white">(empty)</div>
              </div>
            )}
          </div>
        </div>
      </div>
    </aside>
  );
}

3) Filespanel.js


import React, { useMemo, useState } from "react";
import Dropdown from "react-bootstrap/Dropdown";
import "bootstrap/dist/css/bootstrap.min.css";
import "../Filespanel/filespanel.css";

const initialFiles = [
  { title: "Account Statement -Jan 2025", type: "Pdf", date: "2025-01-20" },
  { title: "Monthly Report -Dec 2024", type: "Txt", date: "2024-12-31" },
  { title: "Loan Summary 2024", type: "Pdf", date: "2024-11-12" },
  { title: "Credit Report -Oct", type: "Pdf", date: "2024-10-05" },
  { title: "Summary -Q3 2024", type: "docx", date: "2024-09-30" },
];

export default function FilesPanel() {
  const [query, setQuery] = useState("");
  const [sortAsc, setSortAsc] = useState(false);
  const [fav, setFav] = useState(false);
  const [typeFilter, setTypeFilter] = useState("All");

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();

    let base = initialFiles;

    if (q) {
      base = base.filter(
        (f) =>
          f.title.toLowerCase().includes(q) || f.type.toLowerCase().includes(q)
      );
    }
    if (typeFilter !== "All") {
      base = base.filter((f) => f.type === typeFilter);
    }

    base.sort((a, b) => {
      const da = new Date(a.date);
      const db = new Date(b.date);
      return sortAsc ? da - db : db - da;
    });

    return base;
  }, [query, sortAsc, typeFilter]);

  const downloadOne = (file) => {
    alert("Downloaded: " + file.title);
  };

  const downloadAll = () => {
    alert("Download all (demo).");
  };

  return (
    <div className="card content-card shadow-sm mt-3">
      {/* Header strip */}
      <div className="card-header bg-primary text-white d-flex align-items-center">
        <div className="flex-grow-1">
          <div className="input-group" style={{ maxWidth: "250px" }}>
            <span className="input-group-text">
              <i className="bi bi-search" style={{ color: "black" }}></i>
            </span>
            <input
              type="search"
              className="form-control"
              placeholder="Search"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
            />
          </div>
        </div>

        <div className="ms-3 d-flex align-items-center gap-2">
          <button
            id="favBtn"
            className="btn btn-outline-light btn-sm"
            style={{ borderColor: "white" }}
            onClick={() => setFav((v) => !v)}
            title="Favorite"
          >
            <i
              className={`bi ${fav ? "bi-heart-fill" : "bi-heart"}`}
              style={{ color: "white" }}
            ></i>
          </button>
          <button
            id="downloadAll"
            className="btn btn-outline-light btn-sm"
            style={{ borderColor: "white" }}
            onClick={downloadAll}
            title="Download all"
          >
            <i className="bi bi-download" style={{ color: "white" }}></i>
          </button>
        </div>
      </div>

      <div className="card-body p-4">
        {/* Header row */}
        <div className="d-flex align-items-center mb-3">
          <i className="bi bi-folder2-open display-6 text-secondary me-2"></i>
          <h4 className="mb-0">General</h4>

          <div className="ms-auto d-flex align-items-center gap-3">
            <Dropdown onSelect={(eventKey) => setTypeFilter(eventKey)}>
              <Dropdown.Toggle
                variant="link"
                id="typeDropdown"
                className="p-0 text-decoration-none text-body"
              >
                Type
              </Dropdown.Toggle>
              <Dropdown.Menu>
                <Dropdown.Item eventKey="All">All</Dropdown.Item>
                <Dropdown.Item eventKey="Pdf">Pdf</Dropdown.Item>
                <Dropdown.Item eventKey="Txt">Txt</Dropdown.Item>
                <Dropdown.Item eventKey="docx">docx</Dropdown.Item>
              </Dropdown.Menu>
            </Dropdown>

            <div>
              Date{" "}
              <button
                id="sortDateBtn"
                className="btn btn-link btn-sm p-0 ms-1"
                onClick={() => setSortAsc((v) => !v)}
                title="Toggle date sort"
              >
                <i
                  className={`bi ${
                    sortAsc ? "bi-caret-up-fill" : "bi-caret-down-fill"
                  }`}
                ></i>
              </button>
            </div>
          </div>
        </div>

        {/* Table */}
        <table className="table table-hover table-sm">
          <thead>
            <tr className="small text-muted text-center">
              <th className="text-start">Title</th>
              <th>Type</th>
              <th>Date</th>
              <th className="text-end"></th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((f, idx) => (
              <tr className="file-row" key={idx}>
                <td>
                  <div className="d-flex align-items-center">
                    <div className="file-square me-2"></div>
                    <div>
                      <div>{f.title}</div>
                      <div className="small text-muted">{f.title}</div>
                    </div>
                  </div>
                </td>
                <td className="text-muted text-center">{f.type}</td>
                <td className="text-muted text-center">{f.date}</td>
                <td className="text-end">
                  <button
                    className="download-circle"
                    onClick={() => downloadOne(f)}
                    title="Download"
                  >
                    <i className="bi bi-download"></i>
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* Pagination */}
        <div className="d-flex justify-content-end align-items-center small text-muted">
          <span className="me-2">page</span>
          <span className="page-pill">1</span>
          <button className="btn btn-link btn-sm p-0 ms-2" title="Next page">
            <i className="bi bi-chevron-right"></i>
          </button>
        </div>
      </div>
    </div>
  );
}



5) Filespanel.css


.files-panel {
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
  margin: 15px;
  padding: 10px;
}

/* Ensure table layout */
.files-panel table {
  width: 100%;
  table-layout: fixed;
}

/* Small placeholder box if needed */
.placeholder-box {
  width: 80px;
  height: 15px;
  background: #eee;
  border-radius: 3px;
}

/* Align columns properly */
.col-2 {
  display: flex;
  align-items: center;
}

/* Typography */
.file-title-font {
  font-family: "Georgia", serif;
}

.file-type-date-font {
  font-family: "Verdana", sans-serif;
}

/* ✅ FIX: don't override Bootstrap's .text-start */
.text-start {
  text-align: left !important;
}

/* Dark primary header color */
.bg-primary {
  background-color: #020b43 !important;
}

/* Link-style buttons (like sort) */
.btn-link {
  color: black;
  text-decoration: none;
}

/* File square indicator */
.file-square {
  width: 20px;
  height: 20px;
  background-color: #2f3b52;
  border-radius: 4px;
}

/* Download button circle */
.download-circle {
  background: transparent;
  border: 1px solid #2f3b52;
  border-radius: 50%;
  padding: 5px 8px;
  cursor: pointer;
  transition: background 0.2s ease, color 0.2s ease;
}

.download-circle:hover {
  background: #2f3b52;
  color: white;
}

/* Page number pill */
.page-pill {
  background: #020b43;
  color: #fff;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.85rem;
}
