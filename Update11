--App.js
import React from "react";
import Sidebar from "./components/Sidebars/Sidebar";
import TopBlue from "./components/TopBlue";
import FilesPanel from "./components/Filespanel/FilesPanel";
import Downloads from "./components/Downloads";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Navbar from "./components/Navbar";
import Favorites from "./components/Favorites";

export default function App() {
  return (
    <div className="bg-light">
       {/* Page title (same as your HTML) */}
      <header className="py-2 text-center user-title">
        {/* <h1 className="mb-0">User Dashboard</h1> */}
        {/* <img src="sc.png" class="logo-img me-2"></img> */}
      </header>

      <div className="container-fluid px-4">
        <div className="row gx-3">
          {/* LEFT: Sidebar */}
                <Sidebar />
           
          {/* RIGHT: Main */}
          <main className="col-md-9 col-lg-10">
            <Navbar />
            <div className='container'>
              <BrowserRouter>
               <Routes>
                <Route path="/downloads" element={<Downloads />}></Route>
                <Route path="/favorites" element={<Favorites />}></Route>
               </Routes>
              </BrowserRouter>
            <TopBlue />
            <FilesPanel />
            </div>
          </main>
        </div>
      </div>
    </div>
    );
}

--index.css
/* fonts & base */
body { font-family: "Segoe UI", Roboto, Arial, sans-serif; color: #333; }
.user-title h1 { font-family: Georgia, "Times New Roman", serif; font-weight: 500; }
img{display:flex;flex-direction: column;align-items: center;padding: 10px;}
.logo-img {
  width: 150px; /* Ensures the image doesn't exceed its parent's width */
  height: auto;    /* Maintains the image's aspect ratio */
  display: flex;  /* Ensures it behaves like a block element, important for centering */
  margin-left: 20px; /* Helps center the image horizontally */
}

/* sidebar */
.sidebar { min-height: 140vh; border-right: 1px solid #ddd;background: #020b43 !important; }
.folder-icon { color: white !important; font-size: 20px; margin-right: 8px; }
.btn-toggle { background: transparent; border: none; padding: .25rem .5rem; color: #222; }
.btn-toggle:focus { outline: none; box-shadow: none; }
.rotate-icon { font-size: .85rem; transform: rotate(0deg); transition: transform .15s; color: #7b7b7b; }
.rotate-icon-small { font-size: .7rem; color: #7b7b7b; }
/* NEW: actually rotate when open */
.rotate-icon.rotated { transform: rotate(180deg); }
.rotate-icon-small.rotated { transform: rotate(90deg); }

/* top blue bar */
.top-blue { height: 62px; background:white; color: #fff; border-radius: 6px; margin-top: -60px; box-shadow: inset 0 -1px rgba(0,0,0,.05); }
.icon-btn { color: black; font-size: 1.15rem; padding: .35rem .5rem; cursor: pointer; }
.icon-btn:hover { opacity: .9; }

/* content card */
.content-card { border-radius: 8px; margin-top: -20px; overflow: hidden; min-height: 125vh;}
.card-header .search-pill { max-width: 480px; }
.input-group .form-control { background:white; color: black;width: 5px; }
.input-group .input-group-text { background: rgba(255,255,255,.18); border-radius: 30px 0 0 30px; border: none; color: #fff; }
.search-pill .form-control::placeholder { color: black; }

.card-header { padding: 14px 18px; }

/* folder heading */
.card-body h4 { font-size: 1.25rem; font-weight: 500; margin-left: .2rem; }

/* file rows */
.list-group .file-row {
  display: grid;
  grid-template-columns: 1fr 140px 110px 48px;
  gap: 10px;
  align-items: center;
  padding: 12px 10px;
  border-bottom: 1px solid #eee;
}
.file-title { display:flex; align-items:center; gap:12px;}
/* .file-square { width: 18px; height: 30px; background: #e7e7e7; border-radius: 3px; } */
.download-circle { width: 36px; height:36px; display:inline-flex; align-items:center; justify-content:center; border-radius: 8px; border:1px solid #e0e0e0; background:#fff; cursor:pointer; }
.download-circle .bi { font-size: 1.05rem; color: #4a4a4a; }
.file-row:hover { background: rgba(0,0,0,.02); }

/* small page pill */
.page-pill { display:inline-block; padding: 6px 10px; border-radius: 6px; background: #f2f2f2; color:#333; font-weight:500; }

/* responsiveness */
@media (max-width: 768px) {
  .sidebar { display:none; }
  .content-card { margin-top: 0; }
  .list-group .file-row { grid-template-columns: 1fr 90px 80px 36px; }
}
.navbar{
  /*width: 100%;*/
  /* display: flex; */
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 8%;
  /* position: fixed; */
  top: 0; /* Specifies the scroll position at which the navbar becomes sticky */
  z-index: 10; /* Ensures the navbar stays on top of other content */
}
.navbar ul{
  padding: 10px 30px;
  border-radius: 30px;
  box-shadow: 0 0 30px 0 rgba(0,0,0,0.1);
  color: #000;
}
.navbar ul li{
  display: inline-block;
  padding: 5px 1-px;
  margin: 0 10px;
  color: #000;
  margin-top: 10px;
}
a.active{
  color:#000;
}

--TopBlue.js
import React from "react";

export default function TopBlue() {
  const onLogout = () => alert("Logout.");
  const onFav = () => alert("Favorite clicked (demo).");
  const onDownloadAll = () => alert("Downloaded all (demo).");

  return (
    <div className="top-blue mb-2 rounded">
      <div className="container-fluid d-flex align-items-center justify-content-end">
        <div className="me-3 icon-btn" title="Notifications"><i className="bi bi-bell"></i></div>
        <div className="me-3 icon-btn" title="Messages"><i className="bi bi-envelope"></i></div>
        <div className="me-3 icon-btn" title="Profile"><i className="bi bi-person-circle"></i></div>
        <button onClick={onLogout} className="btn btn-dark btn-sm">Logout</button>
      </div>
    </div>
  );
}

--Navbar.js
import React, { useState } from 'react';
import { BrowserRouter, NavLink } from 'react-router-dom';
import '../components/navbar.css';

// ModalPopup component (can be in a separate file like modal_popup.jsx)
const ModalPopup = ({ showModalPopup, onPopupClose, downloadLink, popupContent }) => { // Added popupContent prop
  return (
    <>
      {showModalPopup && (
        <div className="modal-overlay" onClick={() => onPopupClose(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            {popupContent ? popupContent : ( // Conditional rendering of popupContent
              <>
                <h2>Download Options</h2>
                <p>Choose your download option:</p>
                <a href={downloadLink} download="your-file.pdf">
                  <button style={{borderWidth:1,padding:5,margin:10}}>Download File</button>
                </a>
                <button onClick={() => onPopupClose(false)} style={{borderWidth:2,width:450,display:'grid'}}>Close</button>
              </>
            )}
          </div>
        </div>
      )}
    </>
  );
};

const Navbar = () => {
  const [showDownloadPopup, setShowDownloadPopup] = useState(false);
  const [showFavoritesPopup, setShowFavoritesPopup] = useState(false); // New state for favorites popup

  const toggleDownloadPopup = () => {
    setShowDownloadPopup(!showDownloadPopup);
  };

  const toggleFavoritesPopup = () => { // New function to toggle favorites popup
    setShowFavoritesPopup(!showFavoritesPopup);
  };

  return (
    <BrowserRouter>
      <ul className="nav-links">
        <li>
          <NavLink to="/downloads" activeClassName="active">
            <button onClick={toggleDownloadPopup} style={{borderWidth:1,borderColor:'black'}}>Downloads</button>
          </NavLink>
        </li>
        <li>
          <NavLink to="/favorites" activeClassName="active">
            <button onClick={toggleFavoritesPopup} style={{borderWidth:1,borderColor:'black'}}>Favorites</button> {/* Added onClick handler */}
          </NavLink>
        </li>
      </ul>
      <ModalPopup
        showModalPopup={showDownloadPopup}
        onPopupClose={toggleDownloadPopup}
        downloadLink="/path/to/your-file.pdf" // Replace with your actual download link
      />
      {/* New ModalPopup for Favorites */}
      <ModalPopup 
        showModalPopup={showFavoritesPopup} 
        onPopupClose={toggleFavoritesPopup} 
        popupContent={ 
            <> 
                <h2>Your Favorites</h2> 
                <p>This is your list of favorite items!</p> 
                <button onClick={() => toggleFavoritesPopup()}>Close</button> 
            </> 
        } 
      /> 
    </BrowserRouter>
  );
};

export default Navbar;

--navbar.css
ul {
    list-style-type: none; /* Removes bullet points */
    margin: 0;
    padding: 0;
    display: flex; /* Makes the list items horizontal */
    justify-content: flex-start; /* Aligns items to the start of the container */
    background-color: white; /* Dark background color */
  }
  
  /* Styling for individual list items */
  li {
    padding: 15px 20px; /* Add padding for spacing within each link */
  }
  
  /* Styling for NavLink component */
  .nav-links a {
    color: black; /* White text color */
    text-decoration: none; /* Removes the underline from links */
    font-family: Arial, sans-serif; /* Readable font */
    font-size: 1.1em; /* Adjust font size as needed */
    transition: background-color 0.3s ease; /* Smooth transition on hover */
  }
  
  /* Hover and active states for better user experience */
  .nav-links a:hover,
  .nav-links a.active { /* Use a.active for NavLink active state */
    color: green; /* Slightly lighter background on hover/active */
  }

--Favorites.js
import React, { useState, useEffect } from 'react';
// import "../components/downloads.css";

function Favorites() {
  const [showModal, setShowModal] = useState(false);
  const [downloads, setDownloads] = useState([]); // Imagine this would come from an API or other source

  const handleOpenModal = () => {
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
  };

  // Close modal when clicking outside of it
  useEffect(() => {
    const handleOutsideClick = (event) => {
      if (showModal && event.target.closest('.modal-content') === null) {
        setShowModal(false);
      }
    };
    document.addEventListener('mousedown', handleOutsideClick);
    return () => {
      document.removeEventListener('mousedown', handleOutsideClick);
    };
  }, [showModal]); // Close modal when clicking outside of it
}

  export default Favorites;

--Downloads.js
import React, { useState, useEffect } from 'react';
import "../components/downloads.css";

function Downloads() {
  const [showModal, setShowModal] = useState(false);
  const [downloads, setDownloads] = useState([]); // Imagine this would come from an API or other source

  const handleOpenModal = () => {
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
  };

  // Close modal when clicking outside of it
  useEffect(() => {
    const handleOutsideClick = (event) => {
      if (showModal && event.target.closest('.modal-content') === null) {
        setShowModal(false);
      }
    };
    document.addEventListener('mousedown', handleOutsideClick);
    return () => {
      document.removeEventListener('mousedown', handleOutsideClick);
    };
  }, [showModal]); // Close modal when clicking outside of it

//   return (
//     <div>
//       <button onClick={handleOpenModal}>View Downloads</button>

//       {showModal && (
//         <div className="modal-overlay"> {/*  Overlay to capture clicks outside the modal */}
//           <div className="modal-content">
//             <div className="modal-header">
//               <h4>Downloads</h4>
//               <button className="close-button" onClick={handleCloseModal}>X</button>
//             </div>
//             <div className="modal-body">
//               {downloads.length === 0 ? (
//                 <p>No downloads available.</p>
//               ) : (
//                 <ul>
//                   {downloads.map((download, index) => (
//                     <li key={index}>{download.name}</li>
//                   ))}
//                 </ul>
//               )}
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
}

export default Downloads;

--downloads.css
.modal-overlay {
    position: fixed; /* Keep the modal visible even when the page scrolls */ 
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
    display: flex;
    align-items: center; /* Center vertically */
    justify-content: center; /* Center horizontally */
    z-index: 999; /* Ensure the modal appears on top of other content */
  }
  
  .modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    width: 80%; /* Adjust width as needed */
    max-width: 500px; /* Adjust maximum width as needed */
  }
  
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }
  
  .modal-header h4 {
    margin: 0;
  }
  
  .close-button {
    background: none;
    border: none;
    font-size: 1.2em;
    cursor: pointer;
    padding: 5px;
  }
  
  .modal-body {
    /* Add any specific styling for your modal content here */
  }


--Sidebar.js
import React, { useState } from "react";
import '../Sidebars/sidebar.css';

/**
 * Matches your folder tree:
 * - SCB
 * - General (collapsible)
 *   - Reports (collapsible)
 * - Credit
 *   - General (collapsible)
 */
export default function Sidebar() {
  const [openGeneral, setOpenGeneral] = useState(true);
  const [openReports, setOpenReports] = useState(false);
  const [openCreditGeneral, setOpenCreditGeneral] = useState(false);

  return (
    <aside className="col-md-3 col-lg-2 pe-0">
            <div className="sidebar border rounded-start shadow-sm bg-white">
              <div className="p-3"></div>
      {/* small logo top-left (kept your SVG) */}
      {/* <div className="mb-3 d-flex align-items-center">
        <svg width="28" height="28" viewBox="0 0 24 24" className="me-2">
          {/* <path fill="#2eacd1" d="M2 12c0-5.5 4.5-10 10-10s10 4.5 10 10-4.5 10-10 10S2 17.5 2 12z"/>
          <path fill="#fff" d="M7 8l5 8 5-8z"/> */}
        {/* </svg>
        <span className="fw-semibold">SCB</span>
      </div> */} 

      <div className="folder-tree">
        {/* SCB root */}
        <div className="folder-item">
          <div className="d-flex align-items-center">
            <i className="bi bi-folder2-fill folder-icon" style={{color:"white"}}></i>
            <span className="fw-medium" style={{color:"white"}}>SCB</span>
          </div>
        </div>

        {/* General group */}
        <div className="folder-group mt-3" >
          <button
            className="btn btn-toggle w-100 text-start d-flex align-items-center"
            onClick={() => setOpenGeneral(v => !v)} >
            <i className="bi bi-folder me-2" style={{color:"white"}}></i>
            <span style={{color:"white"}}>General</span>
            <i className={`bi ms-auto rotate-icon ${openGeneral ? "bi-caret-down-fill rotated" : "bi-caret-right-fill"}`}></i>
          </button>

          {openGeneral && (
            <div className="ps-3 pt-2">
              <button
                className="btn btn-toggle w-100 text-start d-flex align-items-center"
                onClick={() => setOpenReports(v => !v)} >
                <i className="bi bi-folder me-2" style={{color:"white"}}></i>
                <span style={{color:"white"}}>Reports</span>
                <i className={`bi ms-auto rotate-icon-small ${openReports ? "bi-caret-down-fill rotated" : "bi-caret-right-fill"}`}></i>
              </button>
              {openReports && (
                <div className="ps-3 pt-2" style={{color:"white"}}>
                  <div className="small text-white" >(no items)</div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Credit group */}
        <div className="mt-3">
          <div className="d-flex align-items-center">
            <i className="bi bi-folder2-fill folder-icon" style={{color:"white"}}></i>
            <span className="fw-medium" style={{color:"white"}}>Credit</span>
          </div>

          <div className="mt-2 ps-3">
            <button
              className="btn btn-toggle w-100 text-start d-flex align-items-center" style={{paddingLeft:0}}
              onClick={() => setOpenCreditGeneral(v => !v)}
            >
              <i className="bi bi-folder me-2" style={{color:"white"}}></i>
              <span style={{color:"white"}}>Credit Risk</span>
              <i className={`bi ms-auto rotate-icon-small ${openCreditGeneral ? "bi-caret-down-fill rotated" : "bi-caret-right-fill"}`}></i>
            </button>
            {openCreditGeneral && (
              <div className="ps-3 pt-2" >
                <div className="small text-white">(empty)</div>
              </div>
            )}
          </div>
        </div>
      </div>
     </div>
    </aside>
  );
}
  
--sidebar.css
 /* .sidebar .logo-img {
    width: 28px;
    height: auto;
  } */
  .text-muted {
    --bs-text-opacity: 1;
    color: white(--bs-secondary-color) !important;
  }


--FilesPanel.js
import React, { useMemo, useState } from "react";
import Dropdown from 'react-bootstrap/Dropdown';
import 'bootstrap/dist/css/bootstrap.min.css';
import '../Filespanel/filespanel.css';

/** Demo data = exactly your initial JS array */
const initialFiles = [
  { title: "Account Statement -Jan 2025", type: "Pdf", date: "2025-01-20" },
  { title: "Monthly Report -Dec 2024", type: "Txt", date: "2024-12-31" },
  { title: "Loan Summary 2024", type: "Pdf",  date: "2024-11-12" },
  { title: "Credit Report -Oct", type: "Pdf", date: "2024-10-05" },
  { title: "Summary -Q3 2024", type: "docx", date: "2024-09-30" }
];

export default function FilesPanel() {
  const [query, setQuery] = useState("");
  const [sortAsc, setSortAsc] = useState(false); // matches currentSortAsc = false
  const [fav, setFav] = useState(false);
  const [typeFilter, setTypeFilter] = useState("All"); // New state for type filter, defaults to "All"
  
  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
   
    let base = initialFiles; // Start with the initial files

    if (q) {
      base = base.filter(
          f =>
            f.title.toLowerCase().includes(q) ||
            f.type.toLowerCase().includes(q)
      );
    }
    if (typeFilter !== "All") {
      base = base.filter(f => f.type === typeFilter);
    }

    base.sort((a, b) => {
      const da = new Date(a.date);
      const db = new Date(b.date);
      return sortAsc ? da - db : db - da;
    });
   

    return base;
  }, [query, sortAsc, typeFilter]);

  const downloadOne = (file) => {
    alert("Downloaded: " + file.title);
    // In a real app, you would trigger an actual download here.
  };

  const downloadAll = () => {
    alert("Download all(demo).");
    // You can loop filtered.forEach(downloadOne) to simulate all.
  };

  return (
    <div className="card content-card shadow-sm">
      {/* Blue header strip with search + fav + download all */}
      <div className="card-header bg-primary text-white rounded-top d-flex align-items-center">
        <div className="flex-grow-1">
          <div className="search-pill" style={{color:"transparent",width:200}}>
            <div className="input-group">
              <span className="input-group-text border-25">
                <i className="bi bi-search" style={{color:"white"}}></i>
              </span>
              <input
                id="searchInput "
                type="search"
                className="form-control border-0"
                placeholder="Search"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
              />
            </div>
          </div>
        </div>

        <div className="ms-3 d-flex align-items-center gap-2">
          <button
            id="favBtn"
            className="btn btn-outline-light btn-sm" style={{borderColor:"white"}}
            onClick={() => setFav(v => !v)}
            title="Favorite"
          >
            <i className={`bi ${fav ? "bi-heart-fill" : "bi-heart"}`} style={{color:"white"}}></i>
          </button>
          <button
            id="downloadAll"
            className="btn btn-outline-light btn-sm" style={{borderColor:"white"}}
            onClick={downloadAll}
            title="Download all"
          >
            <i className="bi bi-download" style={{color:"white"}}></i>
          </button>
        </div>
      </div>

      <div className="card-body p-4">
        {/* folder header with Date sort toggle (Type label kept static to match UI) */}
        <div className="d-flex align-items-center mb-3">
          <i className="bi bi-folder2-open display-6 text-secondary me-2"></i>
          <h4 className="mb-0">General</h4>

        <div className="ms-auto d-flex align-items-center gap-2">
        {/* <div className="me-2"style={{ fontFamily: "Verdana, sans-serif",fontWeight:"initial" }}>Type <i className="bi bi-caret-down-fill small"></i></div> */}
        <Dropdown onSelect={(eventKey) => setTypeFilter(eventKey)}>
                    <Dropdown.Toggle variant="link" id="typeDropdown" className="p-0 text-decoration-none text-body"style={{ fontFamily: "Verdana, sans-serif" }} >
                        Type{/*} <i className="bi bi-caret-down-fill small"></i> */}
                    </Dropdown.Toggle>
                    <Dropdown.Menu >
                        <Dropdown.Item eventKey="All">All</Dropdown.Item>
                        <Dropdown.Item eventKey="Pdf">Pdf</Dropdown.Item>
                        <Dropdown.Item eventKey="Txt">Txt</Dropdown.Item>
                        <Dropdown.Item eventKey="docx">docx</Dropdown.Item>
                    </Dropdown.Menu>
                </Dropdown>
            <div style={{ fontFamily: "Verdana, sans-serif" }}>
              Date{" "}
              <button
                id="sortDateBtn"
                className="btn btn-link btn-sm p-0 ms-1"
                onClick={() => setSortAsc(v => !v)}
                title="Toggle date sort">
                <i className={`bi ${sortAsc ? "bi-caret-up-fill" : "bi-caret-down-fill"}`}></i>
              </button>
            </div>
          </div>
        </div>

        {/* table header */}
        {/* Replaced the div-based header with a table header */}
        <table className="table table-borderless table-sm mb-2">
          <thead>
            <tr className="small text-muted text-center">
              <th className="text-start ms-5" style={{ fontFamily: "Verdana, sans-serif" ,fontWeight:"bolder", width: "auto",textAlign:"right !important" }}>Title</th>
              <th style={{ fontFamily: "Verdana, sans-serif",fontWeight:"bold", width: "16.66%" }}>Type</th>
              <th style={{ fontFamily: "Verdana, sans-serif",fontWeight:"bold", width: "16.66%" }}>Date</th>
              <th className="text-end" style={{ width: "8.33%" }}></th>
            </tr>
          </thead>
        </table>

        {/* file list using table structure */}
        <div id="fileList" className="list-group mb-3">
          <table className="table table-hover table-sm">
            <tbody>
              {filtered.map((f, idx) => (
                <tr className="file-row" key={idx}>
                  <td style={{ width: "58.33%" }}>
                    <div className="d-flex align-items-center">
                      <div className="file-square me-2"></div>
                      <div>
                        <div>{f.title}</div>
                        <div className="small text-muted">{f.title}</div>
                      </div>
                    </div>
                  </td>
                  <td className="text-muted text-center" style={{ width: "30%" }}>{f.type}</td>
                  <td className="text-muted text-center" style={{ width: "100%"}}>{f.date}</td>
                  <td className="text-end" style={{ width: "8.33%" }}>
                    <button
                      className="download-circle"
                      onClick={() => downloadOne(f)}
                      title="Download"
                    >
                      <i className="bi bi-download"></i>
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* pagination / page number (kept static 'page 1 ▸' like original) */}
        <div className="d-flex justify-content-end align-items-center small text-muted">
          <span className="me-2">page</span>
          <span className="page-pill">1</span>
          <button className="btn btn-link btn-sm p-0 ms-2" title="Next page">
            <i className="bi bi-chevron-right"></i>
          </button>
        </div>
      </div>
    </div>
  );
}


--filespanel.css
.files-panel {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin: 15px;
  }
  
  .files-panel table {
    width: 100%;
    table-layout: fixed;
  }
  
  .placeholder-box {
    width: 80px;
    height: 15px;
    background: #eee;
    border-radius: 3px;
  }
  .col-2{
    display:flex;
    align-items: center;
  }
  .file-title-font {
    font-family: "Georgia", serif;
  }
  
  .file-type-date-font {
    font-family: "Verdana", sans-serif;
  }
  .text-start {
    text-align: center !important;
}
.bg-primary {
  background-color: #020b43!important;
}
.btn-link{
  color: black;
}
  
